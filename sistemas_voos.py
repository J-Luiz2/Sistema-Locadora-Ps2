from abc import ABC, abstractmethod
import uuid

# -------------------------------------------------
# 1) Interface                                   ðŸ¡‡
# -------------------------------------------------
class Logavel(ABC):
    """Qualquer classe logÃ¡vel DEVE implementar logar_entrada()."""
    @abstractmethod
    def logar_entrada(self):
        pass


# -------------------------------------------------
# 2) Mixins                                      ðŸ¡‡
# -------------------------------------------------
class IdentificavelMixin:
    """Gera um ID Ãºnico; combine-o com outras classes."""
    def __init__(self):
        self.id = uuid.uuid4()
        # TODO: gerar e armazenar um ID (use uuid.uuid4())~

    def get_id(self):
        return self.id
        # TODO: retornar o ID



class AuditavelMixin:
    """Fornece logs simples ao console."""
    def log_evento(self, evento: str):
        # TODO: imprimir no formato  [LOG] <mensagem>
        print(f" [LOG] <{evento}>")


# -------------------------------------------------
# 3) Classe base Pessoa                          ðŸ¡‡
# -------------------------------------------------
class Pessoa:
    """Classe base para pessoas do sistema."""
    def __init__(self, nome: str, cpf: str):
        self._nome = nome
        self._cpf = cpf
        # TODO: armazenar nome e cpf como atributos protegidos

    @property.getter
    def nome(self):
        # TODO: retornar o nome
        return self.nome
    
    def __str__(self):
        return (f"{self.nome} ({self._cpf})")
        # TODO: "Maria (123.456.789-00)"


# -------------------------------------------------
# 4) Bagagem â€” classe simples                    ðŸ¡‡
# -------------------------------------------------
class Bagagem:
    def __init__(self, descricao: str, peso: float):
        self.descricao = descricao
        self.peso = peso  # kg
    def __str__(self):
        return f"{self.descricao} â€“ {self.peso} kg"


# -------------------------------------------------
# 5) Passageiro                                  ðŸ¡‡
# -------------------------------------------------
class Passageiro(Pessoa):
    """Herda de Pessoa e possui bagagens."""
    def __init__(self, nome: str, cpf: str):
        super().__init__(nome,cpf)
        self.lista_bag = []
        # TODO: chamar super().__init__ e criar lista vazia de bagagens
        
    def adicionar_bagagem(self, bagagem: Bagagem):
        # TODO: adicionar bagagem Ã  lista
        self.lista_bag.append(bagagem)
        
    def listar_bagagens(self):
        # TODO: imprimir as bagagens
        for x in self.lista_bag:
            print(x)


# -------------------------------------------------
# 6) Funcionario (heranÃ§a mÃºltipla + mixins)     ðŸ¡‡
# -------------------------------------------------
class Funcionario(Pessoa, IdentificavelMixin, Logavel):
    def __init__(self, nome, cpf, cargo, matricula):
        super().__init__(nome, cpf)
        self._cargo = cargo
        self._matricula = matricula

    def exibir_dados(self):
        print(f"Nome: {self._nome} \nCargo: {self._cargo}\nMatricula: {self._matricula}\nID: {self.id}")

    def logar_entrada(self):
        print(f" [LOG] <O FuncionÃ¡rio {self.nome} entrou no sistema>")

# TODO: Implementar a classe Funcionario
# - Herda de Pessoa, IdentificavelMixin e Logavel (pode usar AuditavelMixin)
# - Atributos: cargo, matricula
# - MÃ©todos:
#   â€¢ exibir_dados() â†’ imprime nome, cargo, matrÃ­cula e ID
#   â€¢ logar_entrada() â†’ registra no log


# -------------------------------------------------
# 7) MiniAeronave                                ðŸ¡‡
# -------------------------------------------------
class MiniAeronave:
    """Objeto da composiÃ§Ã£o dentro de Voo."""
    def __init__(self, modelo: str, capacidade: int):
        # TODO: armazenar modelo e capacidade
        self.modelo = modelo
        self.capacidade = capacidade

    def resumo_voo(self):
        return (f"A mini aeronave de modelo:{self.modelo} tem a capacidade de {self.capacidade} pessoas")
        # TODO: retornar string com modelo e capacidade
        pass


# -------------------------------------------------
# 8) Voo (composiÃ§Ã£o com MiniAeronave)           ðŸ¡‡
# -------------------------------------------------
class Voo(MiniAeronave):
    def __init__(self, modelo, capacidade, numero_voo, origem, destino, aeronave):
        super().__init__(modelo, capacidade)
        self.numero_voo = numero_voo
        self.origem = origem
        self.destino = destino
        self.aeronave = aeronave
        self.passageiros = []
        self.tribulaÃ§Ã£o = []
    
    def adicionar_passageiro(self,passageiro : Passageiro):
        if not passageiro in self.passageiros and len(self.passageiros) < self.capacidade:
            self.passageiros.append(passageiro)

        if passageiro in self.passageiros:
            print(f"O passageiro informado estÃ¡ dentro da aeronave")

        else:
            print(f"A aeronave estÃ¡ com o nÃºmero mÃ¡ximo de passageiros")

    def adicionar_tripulante(self, tripulante : Funcionario):
        if not tripulante in self.tribulaÃ§Ã£o and len(self.tribulaÃ§Ã£o) < self.capacidade:
            self.tribulaÃ§Ã£o.append(tripulante)

        if tripulante in self.tribulaÃ§Ã£o:
            print(f"O funcionÃ¡rio informado estÃ¡ dentro da aeronave")

        else:
            print(f"A aeronave estÃ¡ com o nÃºmero mÃ¡ximo de tribulantes")

    def listar_passageiros(self):
        for passageiro in self.passageiros:
            print(passageiro.nome)

    def listar_tribulantes(self):
        for tribulante in self.tribulaÃ§Ã£o:
            print(tribulante.nome)

# TODO: Implementar a classe Voo
# - Atributos: numero_voo, origem, destino, aeronave
# - Listas: passageiros, tripulacao
# - MÃ©todos:
#   â€¢ adicionar_passageiro()  (verificar duplicidade e capacidade)
#   â€¢ adicionar_tripulante()
#   â€¢ listar_passageiros()
#   â€¢ listar_tripulacao()


# -------------------------------------------------
# 9) CompanhiaAerea                              ðŸ¡‡
# -------------------------------------------------
class CompanhiaAerea:
    """Agrupa seus voos (has-a)."""
    def __init__(self, nome: str):
        if len(nome) >= 3 :
            self._nome = nome
        else:
            raise ValueError("O nome do voo deve ter mais de 3 letras") 
        self.lista_Voos = []
        # TODO: validar nome (â‰¥ 3 letras) e criar lista vazia de voos

    @property.getter
    def nome(self):
        return self._nome
    
    @nome.setter
    def nome(self, novo_nome: str):
        if len(novo_nome) >= 3:
            self._nome = novo_nome
        else:
            raise ValueError("O nome do voo deve ter mais de 3 letras") 
        # TODO: validar + atualizar nome
        
    def adicionar_voo(self, voo):
        if  not voo in self.lista_Voos:
            self.lista_Voos.append(voo)
        
        else:
            print(f"O voo: {voo} jÃ¡ foi cadasrtado")
    

    def buscar_voo(self, numero: str):
        if len(self.lista_Voos) <= numero + 1:
            return self.lista_Voos[numero]
        
        else:
            return None

    def listar_voos(self):
        for voo in self.lista_Voos:
            print(self.lista_Voos[voo])
        # TODO: imprimir todos os voos


# -------------------------------------------------
# 10) Auditor (IdentificÃ¡vel + LogÃ¡vel)          ðŸ¡‡
# -------------------------------------------------
# TODO: Implementar a classe Auditor
# - Herda de IdentificavelMixin e Logavel
# - Atributo: nome
# - MÃ©todos:
#   â€¢ logar_entrada() â†’ registra entrada no sistema
#   â€¢ auditar_voo(voo) â†’ verifica:
#       â–¸ passageiros â‰¤ capacidade
#       â–¸ existe ao menos 1 tripulante
#     imprime relatÃ³rio de conformidade
#   â€¢ __str__() â†’ "Auditor <nome> (ID: ...)"


# -------------------------------------------------
# 11) Bloco de teste                             ðŸ¡‡
# -------------------------------------------------
if __name__ == "__main__":
    """
    TODO:
      â€¢ Criar 2 companhias, 2 voos cada, passageiros, funcionÃ¡rios e auditor.
      â€¢ Adicionar bagagens, listar passageiros, auditar voos.
      â€¢ Mostrar saÃ­das no console para validar implementaÃ§Ãµes.
    """
    pass
